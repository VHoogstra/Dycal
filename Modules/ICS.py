import arrow
import requests
from ics import Calendar, Event

from Modules.Constants import Constants
from Modules.Logger import Logger


class ICS:
    calendar = None

    def connectToICS(self, url=None, file=None):
        content = None
        if (url is not None):
            content = requests.get(url).text

        if (file is not None):
            with open(file, 'r') as fp:
                content = fp.read()
                fp.close()

        if content == None:
            return
        Logger.getLogger(__name__).info('calender loaded')
        self.calendar = Calendar(content)
        return self

    def createNewEvent(self, dyflexysEvent):
        Logger.getLogger(__name__).info('creating new Calendar event from ' + dyflexysEvent['date'])
        event = Event()
        return self.updateEvent(event, dyflexysEvent)

    def updateEvent(self, event, dyflexysEvent):
        Logger.getLogger(__name__).info('updating new Calendar event from ' + dyflexysEvent['date'])
        event.name = dyflexysEvent['title']

        #nieuwe events hebben geen description
        if (hasattr(event, 'description') and event.description != None):
            # index where autogen starts
            startAutoGenerated = event.description.find(Constants.DESCRIPTION_PREFIX)
            event.description = event.description[0:startAutoGenerated]
        else:
            event.description = ""
        event.description = event.description + dyflexysEvent['description'] + "\n" + dyflexysEvent['id']

        event.begin = dyflexysEvent['start_date']
        event.end = dyflexysEvent['end_date']
        return event

    def generateToICS(self, events):
        if self.calendar is None:
            self.calendar = Calendar()

        Logger.getLogger(__name__).info('calendar created')
        tz = "Europe/Amsterdam"

        for event in events:
            updated = False
            if arrow.get(event['date']).is_between(arrow.now(tz).shift(years=+1), arrow.now(tz).shift(days=-1)):
                continue
            Logger.getLogger(__name__).info('\tcreating event ' + event['start_date'])
            icsEvents = self.calendar.timeline.on(arrow.get(event['start_date'], tzinfo=tz))
            for icsEvent in icsEvents:
                if hasattr(icsEvent, 'description') and icsEvent.description is not None and event[
                    'id'] in icsEvent.description:
                    self.updateEvent(icsEvent, event)
                    updated = True
            if not updated:
                self.calendar.events.add(self.createNewEvent(event))
        return self.calendar.serialize_iter()
